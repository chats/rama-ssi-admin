import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { ApiError, ApiResponse, PaginatedResponse } from '@/types/common.types';

// Create axios instance
const api = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || '/api/v1',
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 30000, // 30 seconds
});

let optionalHeaders: Record<string, string> = {};

// Request interceptor
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    // Add optional headers if provided
    if (optionalHeaders) {
      Object.keys(optionalHeaders).forEach((key) => {
        config.headers[key] = optionalHeaders[key];
      });
     }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error: AxiosError<ApiError>) => {
    if (error.response?.status === 401) {
      // Clear token and redirect to login page if unauthorized
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

// Generic request handler
const request = async <T>(
  method: string, 
  url: string, 
//  data?: any, 
  data?: unknown,
  config?: AxiosRequestConfig
): Promise<T> => {
  try {
    const response = await api.request<T>({
      method,
      url,
      data,
      ...config,
    });
    return response.data;
  } catch (error) {
    const axiosError = error as AxiosError<ApiError>;
    
    const errorData: ApiError = {
      success: false,
      message: axiosError.response?.data?.message || 'An error occurred',
      errors: axiosError.response?.data?.errors,
      status: axiosError.response?.status,
    };
    
    throw errorData;
  }
};

// Generic API methods
export const apiService = {

  setOptionalHeaders: (headers: Record<string, string>) => {
    optionalHeaders = headers;
  },

  get: <T>(url: string, config?: AxiosRequestConfig) => 
    request<ApiResponse<T>>('GET', url, undefined, config),
  
  getPaginated: <T>(url: string, config?: AxiosRequestConfig) => 
    request<PaginatedResponse<T>>('GET', url, undefined, config),
  
  post: <T>(url: string, data?: unknown, config?: AxiosRequestConfig) => 
    request<ApiResponse<T>>('POST', url, data, config),
  
  put: <T>(url: string, data?: unknown, config?: AxiosRequestConfig) => 
    request<ApiResponse<T>>('PUT', url, data, config),
  
  patch: <T>(url: string, data?: unknown, config?: AxiosRequestConfig) => 
    request<ApiResponse<T>>('PATCH', url, data, config),
  
  delete: <T>(url: string, config?: AxiosRequestConfig) => 
    request<ApiResponse<T>>('DELETE', url, undefined, config),
  
  // Special method for file uploads
  upload: <T>(url: string, formData: FormData, config?: AxiosRequestConfig) => {
    const uploadConfig: AxiosRequestConfig = {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      ...config,
    };
    return request<ApiResponse<T>>('POST', url, formData, uploadConfig);
  },
};

export default api;