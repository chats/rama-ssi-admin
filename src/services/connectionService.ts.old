import { ConnectionFilterOptions } from "@/types/connection.types";
import { apiService } from "./api";

const _invitationBody = {
    accept: ["didcomm/aip1", "didcomm/aip2;env=rfc19"],
    handshake_protocols: ["https://didcomm.org/didexchange/1.0"],
    metadata: {},
    protocol_version: "1.1",
    use_public_did: false,
}

const ConnectionService = {
    createInvitation: async () => {
        const { data } = await apiService.post(`/out-of-band/create-invitation`, {
            ..._invitationBody,
        });
        return data;
    },    

    acceptInvitation: async (invitation: string) => {
        const { data } = await apiService.post(`/out-of-band/receive-invitation`, {
            invitation,
        });
        return data;
    },

    deleteInvitation: async (inviMsgId: string) => {
        const { data } = await apiService.delete(`/out-of-band/invitations/${inviMsgId}`);
        return data;
    },

    getConnections: async (filterOptions: ConnectionFilterOptions) => {
        const { data } = await apiService.get(`/connections`, {
            params: {
                ...filterOptions,
            },
        });
        return data;
    },

    getConnectionById: async (connectionId: string) => {
        const { data } = await apiService.get(`/connections/${connectionId}`);
        return data;
    },

    deleteConnection: async (connectionId: string) => {
        const { data } = await apiService.delete(`/connections/${connectionId}`);
        return data;
    }
    
} 
export default ConnectionService